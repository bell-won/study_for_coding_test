package hyewon.bfs_n_dfs_4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Node{
	int x;
	int y;
	Node(int x,int y){
		this.x = x;
		this.y = y;
	}
}


public class problem_9205 {
	static int store,x,y;
	static boolean flag;
	static ArrayList<Node> array = new ArrayList<>();


	static boolean visited[];
	
	
	static int home_x, home_y;
	static int rock_x, rock_y;
	
	

	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int testcase = Integer.parseInt(br.readLine());
		
		for(int i=0; i<testcase; i++){
			store = Integer.parseInt(br.readLine());
			
			array = new ArrayList<>();
			visited = new boolean[store+2];
			
			
			
			home_x = Integer.parseInt(st.nextToken());
			home_y = Integer.parseInt(st.nextToken());
			array.add(new Node(home_x,home_y));
			
			for(int a=0; a<store; a++) {
				
				st = new StringTokenizer(br.readLine());				
				array.add(new Node(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken())));				
			}
			
			st = new StringTokenizer(br.readLine());
			rock_x = Integer.parseInt(st.nextToken());
			rock_y = Integer.parseInt(st.nextToken());
			array.add(new Node(rock_x,rock_y));



			
//			for(int j=0; j<store+2; j++){
//				st = new StringTokenizer(br.readLine());				
//				x = Integer.parseInt(st.nextToken());
//				y = Integer.parseInt(st.nextToken());
//				array.add(new Node(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken())));
//
//			}
			
			bfs();
			
			if(visited[store+1]){
	            System.out.println("happy");
	        }
	        else{
	            System.out.println("sad");
	        }
		}
		

	}
	
	public static int distance(int x1, int y1, int x2, int y2) {
		return Math.abs(x1-x2) + Math.abs(y1-y2);
	}
	
	public static void bfs(){
		Queue<Node> q = new LinkedList<>();
		flag = false;
		q.offer(new Node(x,y));
		visited[0] = true;
		
		while(!q.isEmpty()){
			Node node = q.poll();
			int n_x = node.x;
			int n_y = node.y;
			
			for(int i=0; i<array.size(); i++){
				if(!visited[i]){
					if(distance(n_x,n_y,array.get(i).x,array.get(i).y)<=1000){
						visited[i] = true;
						q.offer(new Node(array.get(i).x,array.get(i).y));
					}

				}
			}
		}
		return;
		
		
	}

}
