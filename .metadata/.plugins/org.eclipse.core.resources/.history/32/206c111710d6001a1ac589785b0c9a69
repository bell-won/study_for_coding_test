package hyewon.bfs_n_dfs_3;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class problem_2589 {
	static int n,m;
	static int result,ans;
	static int max =0;
	static int[][] arr;
	static int[][] cnt;
	static boolean[][] visited;
	static int[] dx = {1,-1,0,0};
	static int[] dy = {0,0,1,-1};
	static class Dot{
		int x;
		int y;	
		public Dot(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		arr = new int[n][m];
		
		
		for(int i=0; i<n; i++){
			String str = br.readLine();
			for(int j=0; j<m; j++){
				arr[i][j] = str.charAt(j);
			}
		}
		
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(arr[i][j]=='L'){
					cnt = new int[n][m];
					bfs(i,j);
//					q.add(new Dot(i,j));  큐 초기화
				}
			}
		}
		System.out.println(max);


	}
	public static void bfs(int n,int m){
		LinkedList<Dot>q = new LinkedList<>();
		q.add(new Dot(n,m));
		
		while(!q.isEmpty()){
			Dot dot = q.poll();
			int x = dot.x;
			int y = dot.y;
			for(int i=0; i<4; i++){
				int nextx = x + dx[i];
				int nexty = y + dy[i];
				if(nextx>=0&&nexty>=0&&nextx<n&&nexty<m){
                    if(arr[nextx][nexty]=='L'){
                        if(cnt[nextx][nexty]==0||cnt[nextx][nexty]>cnt[x][y]+1){
                        	cnt[nextx][nexty]=cnt[x][y]+1;
                            if(cnt[nextx][nexty]>max){
                                max = cnt[nextx][nexty];
                            }
                            q.add(new Dot(nextx,nexty));
                        }
                    }
                }
//				if(nextx>=0 && nextx<n && nexty>=0 && nexty<m){
//					if(arr[nextx][nexty]=='L'&& !visited[nextx][nexty]){
//						visited[nextx][nexty] = true;
//						q.add(new Dot(nextx,nexty));
//						cnt[nextx][nexty] = cnt[x][y] + 1;
//						}
//						
//				}
			}
		}
		
	}

}
