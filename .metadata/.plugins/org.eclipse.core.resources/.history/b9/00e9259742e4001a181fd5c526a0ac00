package hyewon.bfs_n_dfs_4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Dot{
	int a;
	int b;
	Dot(int a,int b){
		this.a = a;
		this.b = b;
	}
}

public class problem_14502 {
	static int n,m;
	static int result = Integer.MIN_VALUE;
	static int count = 1;
	static int[][] arr;
	static int[][] newtmp;
	static boolean[][] visited;
	static int[] dx = {1,-1,0,0};
	static int[] dy = {0,0,1,-1};
	
	public static void main(String[] args)throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		result =0;
		
		arr = new int[n][m];
		visited = new boolean[n][m];
		
		for(int i=0; i<n; i++){
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<m; j++){
				arr[i][j] = Integer.parseInt(st.nextToken());
				visited[i][j] = false;
			}
		}
		
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(arr[i][j]==0){
					arr[i][j] = 1;
					dfs(i,j,count);
					arr[i][j] = 0;
				}
			}
		}
		
		
		
		for(int i=0; i<n; i++){
			System.out.print("\n");
			for(int j=0; j<m; j++){
				System.out.print(arr[i][j] +" ");
				}
			}
		
		System.out.println(count);
		
		

	}
	
	// 벽 세우기
	public static void dfs(int x,int y,int count){
		if(count == 3){ // 벽 3개를 생성했을 경우
			// 임시 맵 생성
			newtmp = new int[n][m];
			for(int i=0; i<n; i++){
				for(int j=0; j<m; j++){
					newtmp[i][j] = arr[i][j];
				}
			}
			// 바이러스 확산 시키기
			for(int i=0; i<n; i++){
				for(int j=0; j<m; j++){
					if(newtmp[i][j]==2){
						bfs(i,j);
					}
				}
			}
			
		}
		else{  // 벽 3개를 다 세우지 못했을 경우 
			for(int i=0; i<n; i++){
				for(int j=0; j<m; j++){
					if(arr[i][j]==0){
						arr[i][j] = 1;
						dfs(i,j,count+1);
						arr[x][y] = 0;
					}
				}
			}
		}
		
		
	}
	
	// 바이러스 확산
	public static void bfs(int x,int y){
		Queue<Dot> q = new LinkedList<>();
		q.add(new Dot(x,y));
		while(!q.isEmpty()){
			Dot dot = q.poll();
			for(int i=0; i<4; i++){
				int cx = dot.a + dx[i];
				int cy = dot.b + dy[i];
				if(cx>=0 && cx<n && cy>=0 && cy<m){
					if(newtmp[cx][cy]==0){
						newtmp[cx][cy] = 2;
						q.add(new Dot(cx,cy));
					}
				}
			}
		}
		
		int tmpcnt =0;
		
		for(int i=0; i<n; i++){
			for(int j=0; j<m; j++){
				if(newtmp[i][j]==2){
					tmpcnt++;
				}
			}
		}
		
		
		
		result = Math.max(result, tmpcnt);
				
				
	}

}
